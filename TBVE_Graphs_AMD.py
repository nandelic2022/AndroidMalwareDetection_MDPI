# -*- coding: utf-8 -*-
"""
Created on Thu May 16 03:52:55 2024

@author: Nikola Anđelić
"""

# Classes assigned to each number:
# Number 0: Class monoclinic
# Number 1: Class orthorhombic
# Number 2: Class triclinic
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns
plt.rcParams["font.family"] = "Times New Roman"
SMALL_SIZE = 20
MEDIUM_SIZE = 22
BIGGER_SIZE = 24

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
data = pd.read_csv("Eval_metrics.csv")
data.columns = ["ACC","AUC", "Precision","Recall","F1_score"]
x = [i+1 for i in range(len(data['ACC']))]
plt.figure(figsize=(8,20))
plt.subplot(5,1,1)
sns.lineplot(x=x, y=data['ACC'], color="black")
plt.fill_between(x, data['ACC'],alpha=0.2, color="lime")
plt.axvline(x=27, color="red", linestyle='--')
plt.axvline(x=28, color= "blue", linewidth=2)
plt.axvline(x=29, color="red", linestyle='--')
# plt.title("Class 0 (monoclinic)", fontsize=20)
plt.ylabel("ACC")
plt.ylim(0.5,1)
plt.grid(True)
plt.xlim(0,len(data)+1)
# plt.xticks([])
plt.subplot(5,1,2)
sns.lineplot(x=x, y=data['AUC'], color="black")
plt.fill_between(x, data['AUC'],alpha=0.2, color = "cyan")
plt.axvline(x=27, color="red", linestyle='--')
plt.axvline(x=28, color= "blue", linewidth=2)
plt.axvline(x=29, color="red", linestyle='--')
plt.ylim(0.5,1)
plt.grid(True)
plt.xlim(0,len(data)+1)
plt.subplot(5,1,3)
sns.lineplot(x=x, y=data['Precision'], color='black')
plt.fill_between(x, data['Precision'],alpha=0.1, color="blue")
plt.axvline(x=27, color="red", linestyle='--')
plt.axvline(x=28, color= "blue", linewidth=2)
plt.axvline(x=29, color="red", linestyle='--')
plt.grid(True)
plt.xlim(0,len(data)+1)
plt.ylim(0.5,1)
plt.subplot(5,1,4)
sns.lineplot(x=x, y = data['Recall'], color="black")
plt.fill_between(x,data['Recall'], alpha = 0.2, color="violet")
plt.axvline(x=27, color="red", linestyle='--')
plt.axvline(x=28, color= "blue", linewidth=2)
plt.axvline(x=29, color="red", linestyle='--')
plt.grid(True)
plt.ylim(0.5,1)
plt.xlim(0,len(data)+1)
plt.subplot(5,1,5)
sns.lineplot(x=x, y = data['F1_score'], color="black")
plt.fill_between(x,data['F1_score'], alpha = 0.2, color="magenta")
plt.axvline(x=27, color="red", linestyle='--')
plt.axvline(x=28, color= "blue", linewidth=2)
plt.axvline(x=29, color="red", linestyle='--')
plt.ylim(0.5,1)
plt.grid(True)
plt.xlim(0,len(data)+1)
plt.ylabel("F1-score")
plt.xlabel("Minimum number of accurate\n andorid malware\n detection (Threshold)")
# plt.savefig("AMD_TBVE_Detection.png",
#              dpi = 300, bbox_inches = "tight")

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
data_original = pd.read_csv("Android_Malware_Benign.csv")
print(data_original)
y_real = data_original.pop('Label')
del data_original
y = []
for i in range(len(y_real)):
    if y_real[i] == 'Malware': 
        y.append(1.0)
    else: 
        y.append(0.0)


data_out = pd.read_csv("Final_pred.csv")
print(data_out)
y_out_29 = []
for i in range(len(data_out)):
    res = sum(data_out.loc[i])
    if res >= 27: 
        y_out_29.append(1.0)
    else:
        y_out_29.append(0)
classes = ["Benign", "Malware"]

cm = confusion_matrix(y, y_out_29)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=classes, yticklabels=classes)
plt.title('Android Malware Detection (Threshold = 28)')
plt.xlabel('Predicted')
plt.ylabel('Actual')

# plt.show()
plt.savefig("AMD_CF_Threshold_28.png", dpi = 300,
            bbox_inches = "tight")
