# -*- coding: utf-8 -*-
"""
Created on Wed May 15 23:28:11 2024

@author: Nikola Anđelić
"""
import re
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns 

#Equations Class_0 

def log2(x):
    with np.errstate(divide = "ignore", invalid = "ignore"):
          return np.where(np.abs(x) > 0.001, np.log2(np.abs(x)),0.)
def log10(x):
    with np.errstate(divide = "ignore", invalid = "ignore"):
          return np.where(np.abs(x) > 0.001, np.log10(np.abs(x)),0.)
import scipy.special as sp 
def CubeRoot(x):
    return sp.cbrt(x)
def log(x1):
      with np.errstate(divide = "ignore", invalid = "ignore"):
          return np.where(np.abs(x1) > 0.001, np.log(np.abs(x1)),0.)
def sqrt(x1):
    return np.sqrt(np.abs(x1))
def div(x1,x2):
    with np.errstate(divide = "ignore", invalid = "ignore"):
        return np.where(np.abs(x2) > 0.001, np.divide(x1,x2), 1.) 
#Redosljed
# 1. ADASYN K = 2
# 2. BorderlineSMOTE K = 3
# 3. KMeansSMOTE k = 3
# 4. SMOTE K = 3
# 5. SVMSMOTE K= 1



Equations = [
#ADASYN Class_0
'np.subtract(np.subtract(X262, np.add(np.add(np.add(X220, np.subtract(np.add(X220, np.subtract(np.add(np.subtract(np.add(np.add(X304, np.subtract(X246, np.tan(X306))), X280), X308), X155), max(np.tan(X275), np.tan(X258)))), np.add(max(min(X105, X269), np.tan(X258)), np.tan(X285)))), np.add(np.tan(div(np.abs(X310), X262)), X280)), np.add(np.abs(div(div(sqrt(X309), X149), X262)), X280))), X280)',
'np.tan(np.add(np.add(np.add(X262, log10(np.add(np.subtract(np.subtract(np.tan(X306), np.multiply(max(X264, X99), max(X216, X108))), X103), X86))), np.multiply(np.cos(np.cos(X262)), np.tan(np.tan(X280)))), log2(np.cos(np.cos(np.abs(np.tan(np.add(X262, np.subtract(log(np.sin(X246)), X316)))))))))',
'np.add(np.subtract(np.add(np.add(X306, np.add(np.subtract(np.add(X306, log(np.tan(log10(np.sin(X280))))), np.add(np.add(np.add(X310, X309), np.tan(X228)), X220)), CubeRoot(X262))), np.add(np.subtract(np.add(np.tan(np.subtract(X275, max(X246, X304))), np.sin(log(log10(np.cos(np.subtract(X307, X275)))))), np.cos(X308)), X262)), div(np.subtract(log10(log10(np.tan(np.tan(np.subtract(max(log2(sqrt(min(np.multiply(X302, X147), max(X131, X13)))), np.sin(max(np.subtract(np.add(X282, X319), np.multiply(X72, X211)), np.subtract(max(X29, X39), np.add(X118, X156))))), np.tan(np.add(min(np.cos(sqrt(X180)), log2(min(X188, X323))), np.cos(min(log(X312), min(X219, X181)))))))))), np.tan(X262)), X258)), X262)',
'np.multiply(np.add(np.add(X258, np.add(log2(np.add(sqrt(np.cos(div(np.tan(X316), X307))), np.subtract(np.tan(X275), np.sin(np.sin(np.sin(X304)))))), np.add(np.subtract(np.add(np.abs(X258), X285), sqrt(X246)), np.add(X306, np.add(X258, np.add(X275, np.add(X306, np.subtract(X86, np.tan(X310))))))))), np.tan(div(np.subtract(log10(np.cos(np.cos(np.sin(log2(CubeRoot(X34)))))), X280), X307))), X262)',
'CubeRoot(np.subtract(np.tan(X306), np.add(np.tan(max(X304, X284)), np.add(np.cos(np.tan(X262)), np.add(np.cos(np.tan(X262)), np.add(np.cos(np.tan(sqrt(X262))), np.add(np.cos(np.tan(np.multiply(X262, np.subtract(log2(np.cos(np.abs(X294))), X149)))), np.add(np.cos(np.tan(np.multiply(X262, np.subtract(log2(np.cos(np.abs(X294))), X149)))), np.tan(div(np.tan(np.subtract(X280, max(np.subtract(X285, CubeRoot(X307)), X258))), div(np.multiply(CubeRoot(log2(np.tan(sqrt(CubeRoot(max(log(np.sin(X55)), min(log(X47), np.tan(X6)))))))), np.multiply(log2(np.tan(np.multiply(np.multiply(sqrt(div(np.subtract(X249, X319), np.cos(X259))), div(log(np.abs(X185)), log(np.cos(X266)))), np.subtract(np.sin(np.multiply(div(X29, X99), CubeRoot(X278))), log(sqrt(log(X28))))))), log2(min(np.cos(np.abs(log(log10(max(X213, X175))))), log(log(np.multiply(np.add(CubeRoot(X89), sqrt(X34)), log10(sqrt(X215))))))))), X316)))))))))))',
'np.subtract(max(-5576.932, CubeRoot(np.subtract(np.subtract(np.subtract(log2(np.sin(max(max(X154, X49), np.cos(X41)))), X253), np.add(X200, X266)), np.tan(CubeRoot(np.subtract(np.tan(CubeRoot(np.subtract(np.sin(div(log(np.tan(np.tan(X149))), np.sin(X262))), np.sin(CubeRoot(np.subtract(np.subtract(np.subtract(np.tan(X275), np.add(np.tan(X304), X280)), np.subtract(X280, X258)), np.tan(CubeRoot(np.subtract(np.sin(div(np.subtract(X316, X262), np.sin(np.cos(X257)))), X275))))))))), np.sin(CubeRoot(np.subtract(np.subtract(np.subtract(X258, np.add(sqrt(np.subtract(X114, X228)), X280)), np.tan(X310)), np.tan(CubeRoot(CubeRoot(np.subtract(log(np.sin(np.sin(X294))), X325))))))))))))), np.abs(div(X268, X306)))',
'np.subtract(np.add(np.tan(X149), np.tan(np.add(np.subtract(X312, np.add(X304, X275)), X306))), np.multiply(np.add(X266, div(CubeRoot(X270), X258)), np.multiply(np.add(np.cos(X262), np.add(np.add(X220, X253), div(X240, X267))), div(X280, X262))))',
'np.tan(CubeRoot(np.tan(np.sin(np.tan(np.sin(np.tan(np.sin(np.tan(np.sin(np.tan(np.tan(CubeRoot(sqrt(np.subtract(np.subtract(X262, max(X280, np.subtract(X316, np.subtract(np.sin(X275), np.subtract(X304, CubeRoot(X258)))))), np.tan(log10(CubeRoot(-370.311))))))))))))))))))',
'np.add(np.subtract(np.abs(np.tan(np.subtract(X275, X306))), div(np.tan(np.abs(X266)), CubeRoot(np.subtract(np.cos(div(X257, X280)), sqrt(X262))))), np.subtract(np.subtract(np.add(X258, np.add(np.subtract(np.add(X258, np.add(sqrt(log10(np.sin(div(X20, X118)))), X285)), np.cos(X149)), X285)), sqrt(div(X303, X308))), np.add(X304, np.add(np.tan(max(X280, X220)), np.tan(X246)))))',
'np.subtract(X275, div(np.subtract(np.abs(np.add(X304, div(X316, max(X149, np.subtract(X138, np.sin(X301)))))), CubeRoot(CubeRoot(np.add(X262, log10(log10(np.cos(CubeRoot(np.add(np.subtract(X266, sqrt(X258)), log10(log(np.tan(np.sin(X280))))))))))))), sqrt(log10(np.cos(np.cos(div(X306, X262)))))))',
#BorderlineSMOTE class_0 
'np.subtract(np.add(X262, np.subtract(np.add(X262, np.subtract(np.subtract(np.add(X262, np.subtract(np.add(np.subtract(X285, X228), np.add(np.subtract(X289, X228), np.subtract(np.add(X262, np.add(X306, X306)), np.cos(np.tan(X258))))), np.tan(min(X266, np.cos(X294))))), np.tan(X280)), np.tan(X280))), X253)), np.tan(np.add(X275, max(X304, X307))))',
'np.subtract(np.subtract(np.subtract(np.subtract(X262, np.subtract(X228, np.subtract(np.subtract(np.subtract(np.subtract(X262, div(np.subtract(np.tan(sqrt(X87)), X262), X306)), X280), X310), X220))), X280), X280), np.subtract(np.subtract(X246, np.tan(X258)), np.subtract(X308, div(np.tan(X307), X306))))',
'np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.tan(X262), div(np.tan(X307), X306)), div(log2(np.sin(X306)), log10(np.tan(X262)))), X280), div(np.subtract(log10(X95), X308), X149)), np.subtract(np.subtract(X220, X258), X258)), X280), np.add(X310, X228)), X280), X246)',
'np.add(np.add(np.subtract(np.subtract(X275, X228), X280), np.add(np.subtract(np.subtract(X275, X228), X280), np.add(np.subtract(X294, X280), np.tan(np.subtract(max(X258, X247), div(X218, X262)))))), np.add(np.subtract(X275, X280), np.tan(np.subtract(X306, div(X310, X262)))))',
'np.subtract(np.add(np.subtract(np.add(np.subtract(np.add(X149, X258), sqrt(np.subtract(X149, sqrt(div(np.tan(np.tan(X266)), np.sin(np.subtract(X262, np.add(np.cos(X218), np.sin(np.subtract(X316, X280)))))))))), X306), sqrt(np.subtract(X262, div(min(np.abs(log(X309)), np.subtract(min(X272, X313), div(X228, X165))), X310)))), X306), X280)',
'np.add(np.add(X262, np.add(np.add(X258, log2(log(np.cos(log(np.tan(X280)))))), np.add(X262, np.add(X306, log2(log(log2(np.tan(np.cos(np.add(np.sin(X285), np.subtract(X310, sqrt(X140)))))))))))), np.add(X262, np.add(np.subtract(X308, X246), log2(log(log2(np.tan(np.cos(np.add(X220, X220)))))))))',
'np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.tan(min(np.add(np.subtract(X262, X266), X262), np.cos(X280))), div(X254, X308)), X280), np.subtract(np.subtract(X236, X285), X306)), X220), X310), X280), X280), np.subtract(log2(log10(np.cos(X258))), X306)), X246), div(np.sin(max(X78, X304)), X149))',
'np.subtract(X262, np.add(np.add(np.cos(X294), np.subtract(np.add(X316, X246), X262)), np.add(np.subtract(np.tan(X220), np.subtract(X262, X280)), np.tan(CubeRoot(np.subtract(np.tan(X280), np.subtract(np.add(X306, X247), div(np.subtract(X286, X262), X258))))))))',
'np.add(np.add(np.subtract(np.add(np.add(np.subtract(np.add(np.subtract(np.add(np.subtract(np.add(np.subtract(np.subtract(np.subtract(np.add(np.subtract(X258, X280), np.subtract(np.subtract(max(X275, X258), X280), X280)), X220), X228), np.add(X246, np.tan(X310))), X262), X266), X262), X266), max(X325, X308)), np.add(X253, X280)), X262), X262), div(log2(X1), X295)), X306), X306)',
'np.add(np.add(np.add(X262, np.subtract(np.add(X149, np.subtract(np.subtract(np.subtract(np.add(X262, np.subtract(np.subtract(np.add(X262, np.subtract(np.add(X262, np.subtract(np.subtract(np.tan(X306), X253), X220)), div(X280, X294))), div(X174, X258)), np.tan(X280))), X266), np.tan(X280)), X310)), div(X260, X258))), X285), X285)',


#KMeansSMOTE Class_0 
'np.subtract(X258, div(np.subtract(X280, np.subtract(log2(np.cos(X220)), div(np.subtract(X280, max(np.tan(X306), X149)), X262))), np.cos(sqrt(sqrt(np.tan(X266))))))',
'np.subtract(X306, np.add(np.add(np.add(div(X254, X262), X310), np.add(np.add(np.add(div(X254, X262), X310), np.add(np.add(np.add(np.tan(X220), X280), np.add(div(X304, X262), np.tan(X280))), np.subtract(X228, np.add(np.add(X308, np.tan(X258)), X247)))), np.subtract(X228, np.add(np.add(X308, np.tan(X258)), X247)))), np.subtract(np.subtract(X246, np.tan(X275)), X262)))',
'np.add(np.add(np.add(np.subtract(np.add(np.add(np.add(np.subtract(X295, np.add(X253, np.add(np.add(X280, X309), np.add(X266, np.add(np.subtract(np.tan(X316), X258), np.tan(X310)))))), X262), X262), X262), np.add(np.tan(X220), np.add(np.subtract(X280, X258), np.add(np.add(np.subtract(X280, np.tan(X275)), np.add(np.cos(X149), X307)), np.add(X304, np.tan(X228)))))), X306), X262), X308)',
'np.subtract(np.subtract(np.add(np.subtract(np.add(np.subtract(np.subtract(np.add(np.subtract(np.add(np.subtract(X306, X310), X308), div(np.subtract(X280, X149), X262)), X258), X280), np.tan(X246)), X285), div(np.subtract(X280, X149), X262)), X258), np.add(X280, X220)), np.add(np.add(X304, X228), X220))',
'np.add(np.subtract(np.add(np.subtract(np.add(np.subtract(np.tan(X258), div(np.subtract(X314, X149), X306)), np.subtract(X262, X304)), np.tan(X280)), np.subtract(X262, np.tan(X220))), np.tan(X280)), np.add(np.subtract(X308, np.subtract(X246, X325)), np.subtract(X262, X266)))',
'np.add(X149, np.add(X262, log2(log10(np.add(X262, log(log10(np.cos(div(log(log10(np.tan(min(np.subtract(X258, X280), min(np.subtract(X280, X316), np.subtract(X152, X228)))))), X262)))))))))',
'np.subtract(np.subtract(np.tan(X258), div(div(np.subtract(np.tan(X280), X306), X262), np.cos(np.subtract(log10(np.cos(np.cos(X298))), X322)))), div(div(np.subtract(np.add(X228, X310), X294), X149), np.cos(X266)))',
'np.subtract(np.subtract(X308, np.subtract(np.subtract(CubeRoot(div(max(np.tan(np.tan(X280)), div(np.abs(X237), X306)), np.cos(np.tan(X228)))), X325), np.subtract(sqrt(X325), X246))), div(log2(np.cos(np.add(X149, np.sin(np.cos(X258))))), X262))',
'np.add(np.subtract(X306, X304), np.add(CubeRoot(np.subtract(X258, np.cos(X262))), np.add(CubeRoot(np.subtract(np.sin(X262), np.add(div(np.add(X250, X316), X149), X280))), np.subtract(np.add(np.add(np.subtract(np.subtract(X308, X228), np.add(X310, X280)), np.subtract(np.add(np.subtract(X285, np.tan(max(X220, X280))), X262), np.cos(X149))), X262), X246))))',
'np.subtract(np.subtract(np.subtract(X262, np.subtract(np.add(np.add(np.add(max(np.tan(np.subtract(X304, X275)), np.add(X316, div(X287, X149))), X280), np.add(max(np.tan(np.subtract(X304, X275)), X228), X280)), np.tan(X220)), X306)), div(X280, X262)), div(np.subtract(np.add(np.subtract(X316, X306), np.tan(X254)), X149), X262))',


#SMOTE Class_0 
'np.subtract(np.tan(np.tan(log2(np.cos(X280)))), div(np.tan(np.cos(X254)), np.subtract(sqrt(log2(np.sin(np.cos(np.add(X258, CubeRoot(X306)))))), np.tan(np.add(X316, X262)))))',
'np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(max(X275, X306), np.cos(np.add(X262, np.add(X262, X258)))), np.add(CubeRoot(X254), np.add(X304, np.subtract(np.add(X310, np.add(X304, np.subtract(X228, X285))), X275)))), np.cos(np.add(X262, np.tan(X149)))), np.add(X280, X246)), np.cos(np.add(X262, np.add(X191, X258)))), max(X280, np.tan(X228))), np.cos(np.add(np.subtract(max(X275, X306), np.cos(np.add(X262, np.add(X262, X258)))), div(np.add(log(np.cos(X7)), log10(CubeRoot(X199))), X280))))',
'np.add(div(np.subtract(X181, np.add(X17, X228)), X220), CubeRoot(np.subtract(np.subtract(np.tan(np.subtract(np.add(min(np.subtract(np.cos(X89), max(np.tan(np.abs(X266)), np.subtract(X55, X20))), X265), max(min(np.tan(X306), np.tan(X262)), sqrt(X275))), div(np.abs(X280), np.abs(np.subtract(X262, X316))))), np.subtract(log(np.cos(np.cos(X304))), X258)), np.tan(X280))))',
'np.tan(log2(max(np.tan(np.subtract(np.cos(np.cos(np.subtract(X316, X262))), np.subtract(np.sin(X275), max(X266, np.sin(X138))))), np.add(X306, np.tan(np.add(sqrt(X280), min(np.cos(sqrt(X280)), np.cos(X304))))))))',
'np.subtract(np.subtract(np.subtract(np.tan(X306), np.tan(np.subtract(np.tan(X228), X149))), np.tan(sqrt(np.subtract(np.add(X262, np.subtract(X316, X280)), np.cos(np.abs(X316)))))), np.tan(np.abs(np.subtract(np.add(X262, np.subtract(log10(np.sin(np.subtract(7683.613, np.add(X262, np.subtract(np.sin(X257), X280))))), X280)), X266))))',
'np.add(X262, np.add(np.tan(X262), np.add(np.tan(X258), log2(log10(np.subtract(np.cos(X307), np.tan(log2(np.add(np.sin(np.cos(sqrt(X280))), log(np.cos(np.subtract(np.cos(np.add(np.subtract(div(np.tan(np.cos(X304)), np.sin(X275)), np.subtract(min(X237, X144), X307)), np.cos(X8))), np.sin(X306)))))))))))))',
'np.subtract(X262, div(np.subtract(div(np.tan(X280), np.add(X258, X149)), np.subtract(X262, div(X228, X306))), sqrt(log(np.tan(np.sin(X266))))))',
'np.add(np.tan(X262), np.subtract(np.add(np.tan(X262), np.subtract(np.add(np.subtract(CubeRoot(np.subtract(X149, np.add(np.tan(X280), X220))), np.add(np.add(np.tan(X280), X220), np.add(X304, np.tan(X246)))), CubeRoot(np.add(log2(np.add(np.add(np.tan(X275), X258), np.cos(X266))), X306))), np.cos(X308))), np.cos(X252)))',
'np.add(np.add(np.add(X306, np.subtract(X262, np.add(np.add(np.add(X280, np.subtract(np.add(np.add(X280, np.subtract(max(X254, X246), X258)), np.add(div(X228, X149), X304)), X258)), div(log2(X167), X149)), np.cos(X306)))), np.subtract(X262, np.add(div(sqrt(X310), np.sin(np.add(np.sin(X308), X325))), np.abs(X220)))), np.subtract(X262, np.tan(X280)))',
'np.subtract(np.add(np.subtract(np.add(np.subtract(X306, X117), X149), np.tan(sqrt(np.tan(div(X280, X262))))), X149), np.tan(sqrt(np.tan(div(np.subtract(X293, X228), X262)))))',

#SVMSMOTE Class_0
'np.add(np.add(X308, np.subtract(np.add(np.add(X149, log10(np.add(X262, X149))), np.subtract(np.add(np.add(np.add(X191, np.subtract(np.add(X262, np.subtract(np.add(np.add(X262, np.subtract(np.add(X262, np.subtract(np.tan(X306), max(np.tan(X189), X266))), div(np.subtract(np.tan(X119), X322), X275))), X258), np.abs(max(np.sin(X314), X280)))), np.add(np.add(np.cos(X308), np.add(np.abs(X304), X280)), max(X253, X304)))), X258), X258), np.add(X228, X280))), np.add(np.add(div(X268, X285), max(X220, X280)), np.add(X310, X246)))), np.subtract(X285, X270))',
'np.subtract(np.multiply(np.subtract(np.tan(np.subtract(X285, X254)), div(np.subtract(X228, np.subtract(np.multiply(np.subtract(X258, div(np.subtract(X280, np.sin(np.subtract(X294, np.tan(X280)))), max(X262, X254))), np.tan(X322)), div(div(np.subtract(X316, X306), np.abs(X149)), X262))), np.cos(X253))), np.cos(X287)), div(np.subtract(X304, X306), div(CubeRoot(X31), np.add(X299, X246))))',
'np.subtract(np.tan(np.abs(X262)), np.subtract(np.subtract(div(log(np.tan(log10(np.sin(np.cos(np.add(div(X302, X285), X314)))))), min(X306, div(log2(CubeRoot(np.cos(np.cos(np.subtract(X267, X310))))), X280))), np.subtract(np.subtract(np.subtract(np.subtract(X258, max(np.tan(X316), np.abs(X220))), X217), X246), np.cos(np.tan(np.subtract(log(np.cos(X262)), X308))))), X258))',
'np.subtract(np.subtract(np.add(np.tan(X285), X308), np.add(np.tan(X220), np.add(np.add(np.subtract(X280, X258), np.add(np.subtract(np.add(div(X312, X149), X304), div(np.multiply(X308, X209), X310)), div(np.abs(np.subtract(X308, X271)), np.cos(div(X280, X308))))), np.add(np.subtract(np.add(np.subtract(div(div(np.subtract(X309, X258), X262), np.cos(X266)), X306), div(np.subtract(X280, X258), X262)), X275), np.add(np.tan(X280), np.add(np.subtract(np.add(div(X312, X149), X304), div(X182, np.subtract(X219, X250))), div(X254, np.sin(X262)))))))), X246)',
'np.subtract(np.subtract(np.subtract(np.subtract(X258, np.add(np.subtract(np.multiply(X304, div(np.subtract(X257, np.tan(X271)), X249)), X285), np.add(X254, np.add(np.add(X316, X228), np.add(np.subtract(np.multiply(X304, div(np.subtract(X247, X308), X249)), X285), np.add(X254, np.add(np.add(X316, X228), np.add(np.subtract(X309, X258), np.add(X280, np.add(np.subtract(CubeRoot(np.sin(X14)), X258), np.add(X280, np.add(X280, X220)))))))))))), div(np.subtract(np.subtract(np.subtract(X304, np.cos(X62)), np.subtract(X306, X310)), np.subtract(X306, X246)), X262)), div(X312, X149)), div(div(np.subtract(X280, X294), X149), X262))',
'np.subtract(X262, np.add(np.add(np.add(X304, X310), X246), np.add(np.cos(np.add(max(X258, np.subtract(X275, np.cos(np.add(max(X285, X308), np.tan(X262))))), X149)), np.add(np.cos(np.add(max(np.tan(X258), X308), np.tan(np.add(np.tan(X254), X149)))), div(np.subtract(X220, np.subtract(X262, np.add(X280, np.add(X280, div(np.subtract(X307, np.subtract(sqrt(np.tan(np.abs(X134))), np.cos(np.add(np.subtract(X262, np.abs(X323)), np.tan(sqrt(X262)))))), X306))))), np.cos(X266))))))',
'np.subtract(np.tan(X149), div(div(div(div(min(X280, np.cos(X258)), X262), np.subtract(np.cos(div(X307, X285)), X247)), np.cos(np.sin(X214))), np.subtract(np.cos(X266), np.sin(X247))))',
'np.subtract(np.tan(X306), np.add(X271, np.add(np.add(np.cos(np.tan(X285)), np.add(np.add(X253, np.add(X280, np.subtract(X220, X262))), np.subtract(np.add(np.cos(np.tan(X308)), np.add(np.add(X304, np.add(np.tan(X280), np.add(X304, np.add(np.tan(X280), np.subtract(div(np.subtract(X254, np.add(X275, X258)), X149), X262))))), np.subtract(np.add(np.cos(np.tan(X308)), np.add(np.abs(X246), np.subtract(X228, X262))), X262))), X149))), np.subtract(np.tan(X310), np.add(X275, X258)))))',
'np.subtract(np.add(np.subtract(np.subtract(np.add(np.subtract(np.subtract(np.add(np.subtract(np.subtract(np.subtract(np.add(np.subtract(np.subtract(np.subtract(X262, np.cos(np.add(X306, np.subtract(X262, np.cos(np.add(X306, X247)))))), np.cos(np.add(np.tan(X308), np.add(np.subtract(div(np.multiply(max(np.abs(X289), np.abs(X142)), log2(CubeRoot(X20))), min(max(np.subtract(X243, X62), np.subtract(X278, X108)), np.cos(np.cos(X273)))), log2(np.subtract(np.tan(min(X217, X71)), log(np.multiply(X161, X60))))), X258)))), X310), X149), np.cos(div(X275, X271))), max(X246, CubeRoot(X254))), np.add(X316, X287)), sqrt(X149)), np.cos(np.tan(X258))), X304), np.subtract(X262, X220)), np.cos(np.add(X306, np.subtract(X262, X280)))), np.tan(X280)), np.subtract(np.subtract(X262, X280), X228)), np.cos(np.cos(X324)))',
'np.subtract(np.subtract(np.subtract(X262, X304), np.subtract(np.subtract(div(np.tan(X280), np.cos(X253)), np.subtract(X262, X253)), np.subtract(X262, np.tan(X220)))), np.subtract(div(np.subtract(div(np.subtract(div(np.tan(max(X279, X310)), X308), np.subtract(max(np.tan(X275), X149), div(X282, max(X258, X325)))), np.cos(X266)), np.subtract(X262, div(X53, max(X258, X285)))), np.cos(X246)), X306))'


]
data = pd.read_csv("AMD_FINAL_IMB.csv")
y = data.pop('label')
# data_real = pd.read_csv("Lion-Class_0.csv")
# y_real = data_real.pop('class_0')
# #Compare y and y_real 
# Compraison = []
# for i in range(len(y_real)):
#     if int(y_real[i]) == int(y[i]):
#         Compraison.append(45)
#     else:
#         Compraison.append(-45)
# from collections import Counter 
# print(Counter(Compraison))




# print(data_real)
# print(data)
def replace_variable(match):
    variable_name = match.group(0)
    # print(variable_name)
    variable_index = int(re.search(r'\d+', variable_name).group())
    return f'data.loc[i][{variable_index}]'

variable_mapping = {f'X{i}': f'data.loc[i][{i}]' for i in range(329)}
pattern = re.compile(r'X\d+')
for i in range(len(Equations)):
    Equations[i] = pattern.sub(replace_variable, Equations[i])
    
print(Equations[0])

def Sigmoid(x):
    return round(1/(1+np.exp(-x)),0)

# y
y_pred = [[] for i in range(len(Equations))]
Final_pred = [[] for i in range(len(Equations))]
# for j in range(len(Original_all)):
for i in range(len(data)):
    if i%10 == 0:
        print(f'The process is {round(i/len(data)*100,2)}% completed')
    res = [Sigmoid(eval(Equations[j])) for j in range(len(Equations))]
    # print(res)
    final_res = sum(res)
    for z in range(len(Equations)):
        if final_res >= z: 
            Final_pred[z].append(1.0)
        else:
            Final_pred[z].append(0.0)
    # print(Final_pred)
    # print("Fuck you motherfucker")
    for k in range(len(res)):
        y_pred[k].append(res[k])

from sklearn.metrics import (accuracy_score,
                              roc_auc_score,
                              precision_score,
                              recall_score,
                              f1_score) 

Accuracy = [accuracy_score(y,Final_pred[i]) for i in range(len(Final_pred))]
AUC = [roc_auc_score(y, Final_pred[i]) for i in range(len(Final_pred))]
Precision = [precision_score(y,Final_pred[i]) for i in range(len(Final_pred))] 
Recall = [recall_score(y,Final_pred[i]) for i in range(len(Final_pred))]
F1_score = [f1_score(y,Final_pred[i]) for i in range(len(Final_pred))]

# import matplotlib.pyplot as plt 
# # plt.figure(figsize=(12,8))
# plt.plot([i for i in range(len(Accuracy))], Accuracy, color='red', label = "Accuracy")
# plt.plot([i for i in range(len(AUC))], AUC, color='blue', label = "Accuracy")
# plt.plot([i for i in range(len(Precision))], Precision, color='green', label="Precision")
# plt.plot([i for i in range(len(Recall))], Recall, color='orange', label="Recall")
# plt.plot([i for i in range(len(F1_score))], F1_score, color='yellow', label = "F1_Score")
# plt.grid(True)
# plt.legend()
# plt.xticks(range(0,len(Final_pred)))


# evalMET = pd.DataFrame([Accuracy, AUC, Precision, Recall, F1_score])
# evalMET_final = evalMET.transpose()
# evalMET_final.columns = ['Accuracy', 'AUC', 'Precision', 'Recall', 'F1-score']
# evalMET_final.to_csv("EvalMetrics_class_0.csv",index=False)

